diff -up recode-3.7.3/configure.ac.1~ recode-3.7.3/configure.ac
--- recode-3.7.3/configure.ac.1~	2019-09-01 19:31:02.291767452 +0200
+++ recode-3.7.3/configure.ac	2019-09-01 19:35:35.608166037 +0200
@@ -40,6 +40,18 @@ AC_PROG_LEX
 AM_PATH_PYTHON([2.2])
 gl_INIT
 
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
+
 dnl help2man
 dnl Set a value even if not found, so that an invocation via build-aux/missing works
 AC_PATH_PROG([HELP2MAN], [help2man], [help2man])
diff -up recode-3.7.3/lib/intprops.h.1~ recode-3.7.3/lib/intprops.h
--- recode-3.7.3/lib/intprops.h.1~	2018-09-24 21:59:32.000000000 +0200
+++ recode-3.7.3/lib/intprops.h	2019-09-01 19:31:02.292767457 +0200
@@ -227,14 +227,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#if HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -up recode-3.7.3/lib/mbrtowc.c.1~ recode-3.7.3/lib/mbrtowc.c
--- recode-3.7.3/lib/mbrtowc.c.1~	2018-09-22 21:59:52.000000000 +0200
+++ recode-3.7.3/lib/mbrtowc.c	2019-09-01 19:31:02.292767457 +0200
@@ -36,7 +36,7 @@
 # include "verify.h"
 
 # ifndef FALLTHROUGH
-#  if __GNUC__ < 7
+#  if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #   define FALLTHROUGH ((void) 0)
 #  else
 #   define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -up recode-3.7.3/lib/quotearg.c.1~ recode-3.7.3/lib/quotearg.c
--- recode-3.7.3/lib/quotearg.c.1~	2018-01-14 23:00:06.000000000 +0100
+++ recode-3.7.3/lib/quotearg.c	2019-09-01 19:31:02.292767457 +0200
@@ -55,7 +55,7 @@
 #define INT_BITS (sizeof (int) * CHAR_BIT)
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -up recode-3.7.3/lib/vasnprintf.c.1~ recode-3.7.3/lib/vasnprintf.c
--- recode-3.7.3/lib/vasnprintf.c.1~	2018-09-24 21:59:33.000000000 +0200
+++ recode-3.7.3/lib/vasnprintf.c	2019-09-01 19:31:02.293767462 +0200
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -up recode-3.7.3/lib/xalloc-oversized.h.1~ recode-3.7.3/lib/xalloc-oversized.h
--- recode-3.7.3/lib/xalloc-oversized.h.1~	2018-01-14 23:00:06.000000000 +0100
+++ recode-3.7.3/lib/xalloc-oversized.h	2019-09-01 19:31:02.293767462 +0200
@@ -41,7 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
diff -up recode-3.7.3/src/common.h.1~ recode-3.7.3/src/common.h
--- recode-3.7.3/src/common.h.1~	2019-08-16 14:24:39.000000000 +0200
+++ recode-3.7.3/src/common.h	2019-09-01 19:31:02.293767462 +0200
@@ -43,7 +43,7 @@
 #define N_(Text) Text
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
